name: Render diagrams and publish to GitHub Pages

on:
  push:
    paths:
      - 'docs/uml/**/*.puml'
      - 'docs/bpmn/**/*.bpmn'
      - 'docs/c4/**/*.dsl'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PLANTUML_VERSION: '1.2024.7'
      STRUCTURIZR_CLI_VERSION: '2024.07.03'
      SITE_DIR: _site
      PLANTUML_JAR: ${{ github.workspace }}/plantuml.jar

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache PlantUML jar
        id: cache-plantuml
        uses: actions/cache@v4
        with:
          path: plantuml.jar
          key: plantuml-${{ env.PLANTUML_VERSION }}

      - name: Download PlantUML
        if: steps.cache-plantuml.outputs.cache-hit != 'true'
        run: |
          curl -fsSL -o plantuml.jar \
            https://github.com/plantuml/plantuml/releases/download/v${PLANTUML_VERSION}/plantuml-${PLANTUML_VERSION}.jar

      - name: Install Graphviz
        run: sudo apt-get update && sudo apt-get install -y graphviz

      - name: Cache Structurizr CLI
        id: cache-structurizr
        uses: actions/cache@v4
        with:
          path: structurizr-cli
          key: structurizr-cli-${{ env.STRUCTURIZR_CLI_VERSION }}

      - name: Download Structurizr CLI
        if: steps.cache-structurizr.outputs.cache-hit != 'true'
        run: |
          mkdir -p structurizr-cli
          curl -fsSL -o structurizr-cli.zip \
            https://github.com/structurizr/cli/releases/download/v${STRUCTURIZR_CLI_VERSION}/structurizr-cli.zip
          unzip -q structurizr-cli.zip -d structurizr-cli
          rm structurizr-cli.zip
          chmod +x structurizr-cli/structurizr.sh

      - name: Prepare site dir
        run: |
          rm -rf "${SITE_DIR}"
          mkdir -p "${SITE_DIR}/docs/uml" "${SITE_DIR}/docs/bpmn" "${SITE_DIR}/docs/c4"

      # --- PlantUML (.puml -> .svg) ---
      - name: Render PlantUML to SVG
        if: ${{ hashFiles('docs/uml/**/*.puml') != '' }}
        run: |
          rsync -a --include='*/' --include='*.puml' --exclude='*' docs/uml/ "${SITE_DIR}/docs/uml/"
          find "${SITE_DIR}/docs/uml" -name '*.puml' -print0 | \
            xargs -0 -I{} java -jar "${PLANTUML_JAR}" -tsvg "{}"

      # --- BPMN (.bpmn -> .svg) ---
      - name: Render BPMN to SVG
        if: ${{ hashFiles('docs/bpmn/**/*.bpmn') != '' }}
        run: |
          rsync -a --include='*/' --include='*.bpmn' --exclude='*' docs/bpmn/ "${SITE_DIR}/docs/bpmn/"

          npm init -y >/dev/null 2>&1 || true
          npm i --no-save puppeteer@24.9.0 bpmn-to-image@0.9.0 bpmn-js@16

          cat > bpmn-export.js <<'JS'
          const fs = require('fs');
          const path = require('path');
          const puppeteer = require('puppeteer');

          (async () => {
            const files = process.argv.slice(2);
            const browser = await puppeteer.launch({
              headless: 'new',
              args: ['--no-sandbox','--disable-setuid-sandbox','--disable-dev-shm-usage']
            });
            const page = await browser.newPage();

            const skeleton = require.resolve('bpmn-to-image/skeleton.html');
            const viewerScript = path.relative(
              path.dirname(skeleton),
              require.resolve('bpmn-js/dist/bpmn-viewer.production.min.js')
            );

            await page.goto('file://' + skeleton);

            for (const input of files) {
              const xml = fs.readFileSync(input, 'utf8');

              const desiredViewport = await page.evaluate(async (diagramXML, options) => {
                const { viewerScript, ...openOptions } = options;
                await loadScript(viewerScript);
                return openDiagram(diagramXML, openOptions);
              }, xml, { title: path.basename(input), viewerScript });

              await page.setViewport({
                width: Math.round(desiredViewport.width),
                height: Math.round(desiredViewport.height),
                deviceScaleFactor: 1
              });

              await page.evaluate(() => resize());
              const svg = await page.evaluate(() => toSVG());

              const out = input.replace(/\.bpmn$/i, '.svg');
              fs.writeFileSync(out, svg, 'utf8');
              console.log('wrote', out);
            }

            await browser.close();
          })().catch(err => { console.error(err); process.exit(1); });
          JS

          mapfile -d '' FILES < <(find "${SITE_DIR}/docs/bpmn" -name '*.bpmn' -print0)
          if [ "${#FILES[@]}" -gt 0 ]; then
            node bpmn-export.js "${FILES[@]}"
          fi

      # --- Structurizr DSL (.dsl -> .puml -> .svg) ---
      - name: Render Structurizr DSL to SVG
        if: ${{ hashFiles('docs/c4/**/*.dsl') != '' }}
        run: |
          rsync -a --include='*/' --include='*.dsl' --exclude='*' docs/c4/ "${SITE_DIR}/docs/c4/"
          find "${SITE_DIR}/docs/c4" -name '*.dsl' -print0 | while IFS= read -r -d '' dsl; do
            outdir="$(dirname "$dsl")/.generated"
            mkdir -p "$outdir"
            ./structurizr-cli/structurizr.sh export -workspace "$dsl" -format plantuml -output "$outdir"
            find "$outdir" -name '*.puml' -print0 | \
              xargs -0 -I{} java -jar "${PLANTUML_JAR}" -tsvg "{}"
            # перемещаем SVG из .generated рядом с .dsl
            find "$outdir" -name '*.svg' -print0 | \
              xargs -0 -I{} bash -lc 'mv "{}" "$(dirname "{}")/../$(basename "{}")"'
            rm -rf "$outdir"
          done

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.SITE_DIR }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
