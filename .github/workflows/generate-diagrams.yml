name: Render diagrams and publish to GitHub Pages

on:
  push:
    paths:
      - 'docs/uml/**/*.puml'
      - 'docs/bpmn/**/*.bpmn'
      - 'docs/c4/**/*.dsl'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PLANTUML_VERSION: '1.2024.7'
      STRUCTURIZR_CLI_VERSION: '2024.07.18'  # зафиксируй под нужную
      SITE_DIR: _site

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache PlantUML jar
        id: cache-plantuml
        uses: actions/cache@v4
        with:
          path: plantuml.jar
          key: plantuml-${{ env.PLANTUML_VERSION }}

      - name: Download PlantUML
        if: steps.cache-plantuml.outputs.cache-hit != 'true'
        run: |
          curl -fsSL -o plantuml.jar \
            https://github.com/plantuml/plantuml/releases/download/v${PLANTUML_VERSION}/plantuml-${PLANTUML_VERSION}.jar

      - name: Install Graphviz
        run: sudo apt-get update && sudo apt-get install -y graphviz

      - name: Cache Structurizr CLI
        id: cache-structurizr
        uses: actions/cache@v4
        with:
          path: structurizr-cli
          key: structurizr-cli-${{ env.STRUCTURIZR_CLI_VERSION }}

      - name: Download Structurizr CLI
        if: steps.cache-structurizr.outputs.cache-hit != 'true'
        run: |
          mkdir -p structurizr-cli
          curl -fsSL -o structurizr-cli.zip \
            https://github.com/structurizr/cli/releases/download/v${STRUCTURIZR_CLI_VERSION}/structurizr-cli-${STRUCTURIZR_CLI_VERSION}.zip
          unzip -q structurizr-cli.zip -d structurizr-cli
          rm structurizr-cli.zip
          chmod +x structurizr-cli/structurizr.sh

      - name: Prepare site dir
        run: |
          rm -rf "${SITE_DIR}"
          mkdir -p "${SITE_DIR}/docs/uml" "${SITE_DIR}/docs/bpmn" "${SITE_DIR}/docs/c4"

      # --- Render PlantUML (.puml -> .svg) ---
      - name: Render PlantUML to SVG
        if: ${{ hashFiles('docs/uml/**/*.puml') != '' }}
        run: |
          # копируем исходники в сайт, чтобы структура совпадала
          rsync -a --include='*/' --include='*.puml' --exclude='*' docs/uml/ "${SITE_DIR}/docs/uml/"
          # рендерим SVG на месте
          find "${SITE_DIR}/docs/uml" -name '*.puml' -print0 | \
            xargs -0 -I{} sh -c 'java -jar ../../../../plantuml.jar -tsvg "{}"'

      # --- Render BPMN (.bpmn -> .svg) ---
      # Используем npx bpmn-to-image (headless Chrome внутри), формат SVG
      - name: Render BPMN to SVG
        if: ${{ hashFiles('docs/bpmn/**/*.bpmn') != '' }}
        run: |
          rsync -a --include='*/' --include='*.bpmn' --exclude='*' docs/bpmn/ "${SITE_DIR}/docs/bpmn/"
          # пофайлово: сохраняем результат рядом
          find "${SITE_DIR}/docs/bpmn" -name '*.bpmn' -print0 | \
            xargs -0 -I{} sh -c 'npx -y bpmn-to-image "{}" --format svg --output "$(dirname "{}")"'

      # --- Render Structurizr DSL (.dsl -> PlantUML -> .svg) ---
      - name: Render Structurizr DSL to SVG
        if: ${{ hashFiles('docs/c4/**/*.dsl') != '' }}
        run: |
          rsync -a --include='*/' --include='*.dsl' --exclude='*' docs/c4/ "${SITE_DIR}/docs/c4/"

          # Для каждого workspace.dsl: export -> PlantUML в .generated, затем рендер .puml -> .svg рядом
          find "${SITE_DIR}/docs/c4" -name '*.dsl' -print0 | while IFS= read -r -d '' dsl; do
            outdir="$(dirname "$dsl")/.generated"
            mkdir -p "$outdir"
            ./structurizr-cli/structurizr.sh export -workspace "$dsl" -format plantuml -output "$outdir"

            find "$outdir" -name '*.puml' -print0 | \
              xargs -0 -I{} sh -c '
                svg_out_dir="$(dirname "$1")"
                base="$(basename "$1" .puml)"
                java -jar ./plantuml.jar -tsvg "$1"
                mv "$(dirname "$1")/$base.svg" "$svg_out_dir/$base.svg"
              ' sh {}

            rm -rf "$outdir"
          done

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.SITE_DIR }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
